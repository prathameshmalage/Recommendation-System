import pandas as pdfrom scipy import spatialdf = pd.read_csv(r'/Users/DopeEngineer/Downloads/fulltrack_infogenre1.csv')'''Cosine similarity will help us find a similarity matrix between our song metadata and give us a similarity score'''def cosine_similarity(row, song_row):    song_metadata = song_row.loc[:, 'danceability':'popularity'].values.reshape(-1, 1)    cs_song_metadata = row['danceability':'popularity'].values.reshape(-1, 1)    return 1 - spatial.distance.cosine(song_metadata, cs_song_metadata)'''Hamilton similarity like cosine similarity will help us find a  matrix between our song metadata and give us a similarity score.This will be an added comparison on top of cosine similarity'''def hamilton_similarity(row, song_row):    song_metadata = song_row.loc[:, 'danceability':'popularity'].values.reshape(-1, 1)    hs_song_metadata = row['danceability':'popularity'].values.reshape(-1, 1)    return spatial.distance.hamming(song_metadata, hs_song_metadata)def song_input(df):    song_name = input('Enter the Song Name')    artist_name = input('Enter the Artist Name')    song_row = df.loc[(df['track_name'] == song_name) & (df['artist_name'] == artist_name)]    recommendation(song_row)'''our dataset will first be sorted first on Cosine then on hamilton similarity.'''def recommendation(song_row):    df['cosine_similarity'] = df.apply(cosine_similarity, args=(song_row.head(1),), axis=1)    df['hamilton_similarity'] = df.apply(hamilton_similarity, args=(song_row.head(1),), axis=1)    df.sort_values(['cos_simil', 'hamil_simil'], inplace=True, ascending=[False, False])    pd.set_option('display.max_columns', None)    top_songs = df.head(20)    print(top_songs.reset_index()[['track_name', 'artist_name']])song_input(df)